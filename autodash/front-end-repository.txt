================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-02T00:12:40.746Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
app.vue
components/Nav.vue
nuxt.config.ts
package.json
pages/github/callback.vue
pages/index.vue
pages/login.vue
plugins/auth.js
public/robots.txt
README.md
server/tsconfig.json
stores/auth.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app.vue
================
<template>
  <div>
    <Nav />
    <NuxtPage />
  </div>
</template>

<script setup>
import Nav from "~/components/Nav.vue";
</script>

<style>
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
</style>

================
File: components/Nav.vue
================
<template>
  <nav>
    <NuxtLink to="/">Home</NuxtLink>
    <NuxtLink v-if="!isAuthenticated" to="/login">Login</NuxtLink>
    <a v-else href="#" @click.prevent="logout">Logout</a>
  </nav>
</template>

<script setup>
import { useAuthStore } from "~/stores/auth";
import { storeToRefs } from "pinia";

const authStore = useAuthStore();
const { isAuthenticated } = storeToRefs(authStore);

const logout = () => {
  authStore.logout();
  // Redirect to home page after logout
  navigateTo("/");
};
</script>

<style scoped>
nav {
  padding: 1rem;
  background-color: #f0f0f0;
}

nav a {
  margin-right: 1rem;
  color: #333;
  text-decoration: none;
}

nav a:hover {
  text-decoration: underline;
}
</style>

================
File: nuxt.config.ts
================
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  compatibilityDate: '2024-08-30',
  devtools: { enabled: true },
  modules: ['@pinia/nuxt'],
  alias: {
    pinia: "/node_modules/@pinia/nuxt/node_modules/pinia/dist/pinia.mjs"
  },
  runtimeConfig: {
    public: {
      apiBase: process.env.API_BASE_URL || 'http://localhost:8000',
      githubClientId: process.env.GH_CLIENT_ID
    }
  }
})

================
File: package.json
================
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "dependencies": {
    "@pinia/nuxt": "^0.5.4",
    "nuxt": "^3.13.0",
    "vue": "latest"
  }
}

================
File: pages/github/callback.vue
================
<template>
  <div>
    <p>Processing GitHub login...</p>
  </div>
</template>

<script setup>
import { onMounted } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { useAuthStore } from '~/stores/auth'
import { useRuntimeConfig } from '#app'

const router = useRouter()
const route = useRoute()
const authStore = useAuthStore()
const config = useRuntimeConfig()

onMounted(async () => {
  const code = route.query.code
  
  if (code) {
    try {
      const response = await fetch(`${config.public.apiBase}/github/callback`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ code }),
      })

      if (response.ok) {
        const data = await response.json()
        authStore.setToken(data.access_token)
        authStore.setUser(data.user)
        router.push('/dashboard')
      } else {
        const errorData = await response.json()
        console.error('GitHub authentication error:', errorData)
        router.push(`/login?error=${encodeURIComponent(errorData.detail || 'Authentication failed')}`)
      }
    } catch (error) {
      console.error('GitHub authentication error:', error)
      router.push('/login?error=github_auth_failed')
    }
  } else {
    router.push('/login?error=no_code')
  }
})
</script>

================
File: pages/index.vue
================
<template>
  <div>
    <h1>Welcome to AutoDash</h1>
    <p v-if="isAuthenticated">
      Hello, {{ user?.name || "User" }}! You're logged in.
    </p>
    <p v-else>Please log in to use AutoDash.</p>
  </div>
</template>

<script setup>
import { useAuthStore } from "~/stores/auth";
import { storeToRefs } from "pinia";

const authStore = useAuthStore();
const { isAuthenticated, user } = storeToRefs(authStore);
</script>

================
File: pages/login.vue
================
<template>
  <div class="login-container">
    <h1>Welcome to AutoDash</h1>
    <button @click="loginWithGitHub" class="github-button">
      Login with GitHub
    </button>
    <p v-if="error" class="error">{{ error }}</p>
  </div>
</template>

<script setup>
import { ref } from "vue";
import { useRuntimeConfig } from "nuxt/app";

const config = useRuntimeConfig();
const error = ref("");

const loginWithGitHub = () => {
  const githubClientId = config.public.githubClientId;
  const redirectUri = encodeURIComponent(
    `${window.location.origin}/github/callback`
  );
  const githubAuthUrl = `https://github.com/login/oauth/authorize?client_id=${githubClientId}&redirect_uri=${redirectUri}`;

  window.location.href = githubAuthUrl;
};
</script>

<style scoped>
.login-container {
  max-width: 300px;
  margin: 0 auto;
  padding: 20px;
  text-align: center;
}
.github-button {
  padding: 10px 20px;
  background-color: #24292e;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}
.error {
  color: red;
  margin-top: 10px;
}
</style>

================
File: plugins/auth.js
================
import { useAuthStore } from "~/stores/auth";

export default defineNuxtPlugin((nuxtApp) => {
  if (import.meta.client) {
    const authStore = useAuthStore(nuxtApp.$pinia);

    // Initialize auth state
    authStore.initializeFromStorage();
  }
});

================
File: server/tsconfig.json
================
{
  "extends": "../.nuxt/tsconfig.server.json"
}

================
File: stores/auth.js
================
import { defineStore } from "pinia";

export const useAuthStore = defineStore("auth", () => {
  const token = useState("auth_token", () => null);
  const user = useState("auth_user", () => null);

  const isAuthenticated = computed(() => !!token.value);

  function setToken(newToken) {
    token.value = newToken;
    if (import.meta.client) {
      localStorage.setItem("github_token", newToken);
    }
  }

  function setUser(newUser) {
    user.value = newUser;
    if (import.meta.client) {
      localStorage.setItem("github_user", JSON.stringify(newUser));
    }
  }

  function logout() {
    token.value = null;
    user.value = null;
    if (import.meta.client) {
      localStorage.removeItem("github_token");
      localStorage.removeItem("github_user");
    }
  }

  function initializeFromStorage() {
    if (import.meta.client) {
      const storedToken = localStorage.getItem("github_token");
      const storedUser = JSON.parse(
        localStorage.getItem("github_user") || "null"
      );
      if (storedToken) token.value = storedToken;
      if (storedUser) user.value = storedUser;
    }
  }

  return {
    token,
    user,
    isAuthenticated,
    setToken,
    setUser,
    logout,
    initializeFromStorage,
  };
});